name: Build and Upload to PyPI

on: [push, pull_request, workflow_dispatch]

jobs:
  build_wheels:

    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
    # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            python: 38
            bitness: 64
            platform_id: win_amd64

          # Ubuntu
          - os: ubuntu-latest
            python: 38
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014

          # MacOS
          - os: macos-latest
            bitness: 64
            python: 38
            platform_id: macosx_x86_64

    env:
      CIBW_SKIP: pp* cp36* cp37* cp39* cp310* *-win32 *musllinux*
      CIBW_ARCHS: auto64
      CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
      CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BEFORE_BUILD_LINUX: |
        yum install -y cmake wget
        bash {project}/ci/embree_linux.bash
      CIBW_BEFORE_BUILD_MACOS: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        brew install wget bash cmake
        bash {project}/ci/embree_macos.bash
      CIBW_BEFORE_BUILD_WINDOWS: |
        pip install delvewheel
        {project}\\ci\\embree_windows.bat
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
        LD_LIBRARY_PATH=~/embree/lib:$LD_LIBRARY_PATH
        auditwheel repair -w {dest_dir} {wheel}
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
        LD_LIBRARY_PATH=~/embree/lib:$LD_LIBRARY_PATH
        delocate-listdeps {wheel} && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
        delvewheel repair
        --add-path .\\pyembree\\embree\\bin
        --no-mangle tbb.dll;tbbmalloc.dll;embree.dll
        -w {dest_dir} {wheel}

    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl

      # - name: Upload To PyPI
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #   run: |
      #     python -m pip install twine
      #     twine upload ./*